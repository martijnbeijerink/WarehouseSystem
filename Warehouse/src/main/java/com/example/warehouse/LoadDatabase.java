package com.example.warehouse;

import javax.sql.DataSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

@Component
public class LoadDatabase implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(LoadDatabase.class);

    @PersistenceContext
    private EntityManager entityManager;

    private JdbcTemplate jdbcTemplate;

    @Autowired
    public void setDataSource(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Override
    @Transactional // Wrap the entire operation in a transaction
    public void run(String... args) {
        try {
            resetDatabase(); // Execute the database reset
            createTrigger(); // Create the trigger
        } catch (Exception e) {
            logger.error("Error during database initialization", e);
        }
    }

    @Transactional
    public void resetDatabase() {
        dropTables(); // Drop tables
        createTables(); // Create tables
    }

    private void dropTables() {
        String[] tableNames = {"outbound_order", "sku", "monitoring_orders", "outbound_cartons", "inbound_order"};
        for (String tableName : tableNames) {
            String dropTableSQL = "BEGIN " +
                    "   EXECUTE IMMEDIATE 'DROP TABLE " + tableName + " CASCADE CONSTRAINTS'; " +
                    "EXCEPTION " +
                    "   WHEN OTHERS THEN " +
                    "       IF SQLCODE != -942 THEN " + // ORA-00942: table or view does not exist
                    "           RAISE; " +
                    "       END IF; " +
                    "END;";
            try {
                entityManager.createNativeQuery(dropTableSQL).executeUpdate();
                logger.info("Dropped table " + tableName + " if it existed.");
            } catch (Exception e) {
                logger.error("Error dropping table " + tableName, e);
                throw e;
            }
        }
    }
    private void createTables() {
        String createOrderTable =
                "CREATE TABLE outbound_order (" +
                        "  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "  order_number VARCHAR2(50), " +
                        "  sku VARCHAR2(50), " +
                        "  quantity NUMBER," +
                        "  status VARCHAR2(50))";

        String createSkuTable =
                "CREATE TABLE sku (" +
                        "  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "  sku VARCHAR2(50), " +
                        "  name VARCHAR2(50), " +
                        "  description VARCHAR2(255), " +
                        "  quantity NUMBER NOT NULL, " +
                        "  status VARCHAR2(50))";

        String createMonitoringOrdersTable =
                "CREATE TABLE monitoring_orders (" +
                        "  order_number VARCHAR2(50) PRIMARY KEY, " +
                        "  sku VARCHAR2(50), " +
                        "  allocated_quantity NUMBER, " +
                        "  order_status VARCHAR2(50), " +
                        "  last_updated TIMESTAMP)";

        String createOutboundCartons =
                "CREATE TABLE outbound_cartons (" +
                        "  carton_id NUMBER PRIMARY KEY, " +
                        "  order_number VARCHAR2(50), " +
                        "  sku VARCHAR2(50), " +
                        "  quantity NUMBER, " +
                        "  carton_status VARCHAR2(50), " +
                        "  last_updated TIMESTAMP)";

        String createInboundOrders =
                "CREATE TABLE inbound_order (" +
                        "  inbound_order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                        "  sku VARCHAR2(255) NOT NULL, " +
                        "  quantity NUMBER(10) NOT NULL, " +
                        "  receive_date DATE DEFAULT SYSDATE NOT NULL, " +
                        "  country_of_origin VARCHAR2(255) NOT NULL)";

        try {
            entityManager.createNativeQuery(createOrderTable).executeUpdate();
            entityManager.createNativeQuery(createSkuTable).executeUpdate();
            entityManager.createNativeQuery(createMonitoringOrdersTable).executeUpdate();
            entityManager.createNativeQuery(createOutboundCartons).executeUpdate();
            entityManager.createNativeQuery(createInboundOrders).executeUpdate();
        } catch (Exception e) {
            logger.error("Error executing create tables SQL", e);
            throw e;
        }
    }

    private void createTrigger() {
        String createTriggerSQL =
                "CREATE OR REPLACE TRIGGER trg_order_update " +
                        "FOR UPDATE OF status ON outbound_order " +
                        "COMPOUND TRIGGER " +

                        "    -- Declare a collection to hold the order numbers to be processed " +
                        "    TYPE t_order_numbers IS TABLE OF outbound_order.order_number%TYPE; " +
                        "    v_order_numbers t_order_numbers := t_order_numbers(); " +

                        "    BEFORE EACH ROW IS " +
                        "    BEGIN " +
                        "        -- Only process the order if the status is changing to 'ALLOCATED' " +
                        "        IF :NEW.status = 'ALLOCATED' THEN " +
                        "            v_order_numbers.EXTEND; " +
                        "            v_order_numbers(v_order_numbers.COUNT) := :NEW.order_number; " +
                        "        END IF; " +
                        "    END BEFORE EACH ROW; " +

                        "    AFTER STATEMENT IS " +
                        "    BEGIN " +
                        "        -- Loop through the collected order numbers " +
                        "        FOR i IN 1..v_order_numbers.COUNT LOOP " +
                        "            BEGIN " +
                        "                -- Attempt to log the start of cartonization " +
                        "                INSERT INTO cartonization_log (operation, message) " +
                        "                VALUES ('TRG_ORDER_UPDATE', 'Cartonization started for order: ' || v_order_numbers(i)); " +

                        "                -- Call the cartonization procedure " +
                        "                cartonization.cartonize_orders(v_order_numbers(i)); " +

                        "                -- Log successful cartonization " +
                        "                INSERT INTO cartonization_log (operation, message) " +
                        "                VALUES ('TRG_ORDER_UPDATE', 'Cartonization completed for order: ' || v_order_numbers(i)); " +
                        "            EXCEPTION " +
                        "                WHEN OTHERS THEN " +
                        "                    -- Prepare the error message " +
                        "                    DECLARE " +
                        "                        v_error_message VARCHAR2(200); " +
                        "                    BEGIN " +
                        "                        v_error_message := 'Error: ' || SUBSTR(SQLERRM, 1, 200); " +

                        "                        -- Log the error message " +
                        "                        INSERT INTO cartonization_log (operation, message) " +
                        "                        VALUES ('TRG_ORDER_UPDATE', v_error_message); " +
                        "                    END; " +
                        "                    RAISE; " +
                        "            END; " +
                        "        END LOOP; " +
                        "    END AFTER STATEMENT; " +

                        "END trg_order_update;";

        try {
            jdbcTemplate.execute(createTriggerSQL);
            logger.info("Trigger trg_order_update has been created.");
        } catch (Exception e) {
            logger.error("Error creating trigger trg_order_update", e);
            throw e; // or handle more gracefully
        }
    }
}

